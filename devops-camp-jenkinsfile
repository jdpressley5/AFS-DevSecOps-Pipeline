pipeline {
	agent {
		label 'jenkins-agent'
	}
	environment {
		PIPELINE_HASH = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
		HARBOR_REGISTRY = 'registry.dev.afsmtddso.com'
		HARBOR_PROJECT = 'jpressley-harbor-project'
		APP_IMAGE_NAME = 'app'
		NAME_SPACE = 'jpressley'
		HARBOR_AUTH = 'jpressley-harbor-auth'
	}
	stages {
		stage('App Repository Clone') {
			steps {
				echo "Cloning application repository"
				sh 'git clone https://github.com/jdpressley5/afs-labs-student.git'
				dir('afs-labs-student') {
					script {
						env.COMMIT_HASH = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
						}
				}
			}
		}
		stage('App Docker Build') {
			steps {
				echo "Building application image"
				withCredentials([usernameColonPassword(credentialsId: $HARBOR_AUTH, variable: 'HARBOR-AUTH')]) {
					script {
						sh 'docker build -t $APP_IMAGE_NAME-$COMMIT_HASH -f ./app/Dockerfile ./afs-labs-student'
						docker.withRegistry('https://$HARBOR_REGISTRY', $HARBOR_AUTH) {
							sh 'docker tag $APP_IMAGE_NAME-$COMMIT_HASH $HARBOR_REGISTRY/$HARBOR_PROJECT/$APP_IMAGE_NAME:$COMMIT_HASH-$PIPELINE_HASH'
							sh 'docker push $HARBOR_REGISTRY/$HARBOR_PROJECT/$APP_IMAGE_NAME:$COMMIT_HASH-$PIPELINE_HASH'
						}
					}
				}
			}
			post {
				always {
					echo "Clean local $APP_IMAGE_NAME image"
					script {
						try {
							sh 'docker rmi $APP_IMAGE_NAME-$APP_HASH:latest'
							sh 'docker rmi $HARBOR_REGISTRY/$HARBOR_PROJECT/$APP_IMAGE_NAME:$APP_HASH-$PIPELINE_HASH'
						} catch (err) {
							echo err.getMessage()
						}
					}
				}
			}
		}
		stage('Harbor Security Scan') {
			steps {
				withCredentials([usernamePassword(credentialsId: $HARBOR_AUTH, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
					echo "Scanning $APP_IMAGE_NAME image"
					sh 'python harbor_scanner.py -i $APP_IMAGE_NAME -r $HARBOR_REGISTRY -p $HARBOR_PROJECT -c ${USERNAME}:${PASSWORD}'
				}
			}
		}
		stage('Deploy App') {
			steps {
				echo "Deployment stage"
				sh 'kubectl -n $NAME_SPACE apply -f ./afs-labs-student/kubernetes/config-map.yaml'
				sh 'kubectl -n $NAME_SPACE set image deployment/app-deployment app-deployment=$HARBOR_REGISTRY/$HARBOR_PROJECT/$APP_IMAGE_NAME:$COMMIT_HASH-$PIPELINE_HASH'
			}
		}
	}
	post {
		cleanup {
			echo "Clean workspace"
			sh 'rm -rf .git ./*'
		}
	}
}